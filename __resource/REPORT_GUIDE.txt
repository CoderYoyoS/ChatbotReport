INTRO ->
Leave the intro for a while…. I’m gonna write this on Wednesday depending on where we are
——————————————————————————————————————————————————————————————————————————————
Literature review ->
Here’s all the core things that we need to research

	- The App boom is over and why developing new apps is a loosing battle
	- Why Chatbots are good, what do they actually do?
	- Chatbots are the next thing
	- Reference the chatbot that helps people appeal parking tickets and the ebay bot
	- Facebook Messenger is the biggest messaging platform and thats why we’ll do it here
	- Why backend and API development is the way things are going
	- Why microservices are so good
	- Why testing and debugging is easier if we take this approach
	
	Just google the above, pick the first article, and cite!

GOAL -> Reader understands that we have justified why bots and api development are worth the effort
——————————————————————————————————————————————————————————————————————————————
Method ->
This is a high level view. no complicated stuff!

NEXT SECTION IS WHERE WE TALK ABOUT WHAT WE CHOSE, only make reference to them here

How developers make bots:
	Review on:
	Dev tools:
	Bot devs use A PaaS(Platform as a service) i.e Heroku, Docker, Azure to deploy
	their tools and technologies:
		- Bot devs use server-side languages, why?
		- Bot devs use Data usually document db’s, why?
		- Bot devs use version control and continuous integrartion, why?(I’ll get Travis working FACT)
		- Bot devs use es6 -> es5 transpilers, why?
		- Bot devs use tools to test their api end points(POSTMAN), why?
		- Bot devs use documentation tools when building api’s(SWAGGER or another one you choose), why?
		- Whatever other types of tools you want

	Conversational flow:
		Bot devs use NLP or logic driven bots(does the bot run on NLP or if else statements)?some do, some dont
		Bot devs use Bot engines - why? what do they do?
		Is NLP reliable with todays tools? Probably not that much,technology is improving but maybe we want a mixture of both ie general chit chat is NLP and our apis we’ll write all the logic
		
	Feature Selection:
		Bot devs look at a problem and the FAQ's around them, conduct surveys ask questions and get feedback
		
	Architecture:
		Bot devs use a microservice architecture to implement these things, why?

GOAL -> Reader understands that what type of tools developers are using now and what will be required to get a bot going
——————————————————————————————————————————————————————————————————————————————
System Requirements and Specification ->
	Tools:
	We chose:
	Heroku because, free, easy-to-use, give X amount of RAM, CPU, savage with Github etc
	Node becasue single-threaded, event loop, perfect for chat, javascript etc
	Mongo because document DB, elastic, perfect for this becasue x
	Github, perfect with heroku and travis
	Babel because we’re preparing for an event where standards change
	Postman to test our api end points
	Swagger so we can have kickass docs to hand off to our front-end engineers	
	Architecture:
		We chose a decoupled api archiecture because easier to collab, debug, more secure etc
		Bus, Gym, Library are the services
	Features:
	We conducted surveys to find out the best features for our app and individually for each service
	(AGAIN, NO DIAGRAMS DONT WORRY)

GOAL -> Reader understands what tools, features and architecture we chose and why
——————————————————————————————————————————————————————————————————————————————

System Design ->

	***I’ll get this done on WEDNESDAY so dont sweat this part***

	(forget the diagrams!)

	Architecture:
		Overview:
		Consists of 3 apis and a driver app, facebook and a bot engine
		Example of request flow

		Data:
		Each Api has a DB
		Example of db query
		Example of a schema

		Build:
		How all tools handle their jobs
		Example of build execution flow

		Conversation
		How the bot engine handles a request,
		How our logic in our apis handle a request
		Example of conversation flow

GOAL -> Reader understands how our app works at the lower levels

——————————————————————————————————————————————————————————————————————————————

Implementation 

	LEAVE BLANK
——————————————————————————————————————————————————————————————————————————————

Testing and evaluation
		
	LEAVE BLANK
——————————————————————————————————————————————————————————————————————————————

Conclusions and Further Work
	LEAVE BLANK
——————————————————————————————————————————————————————————————————————————————
